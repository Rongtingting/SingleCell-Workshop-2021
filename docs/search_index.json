[["index.html", "HKU Single-cell Workshop (Module 4) Chapter 1 Introduction 1.1 Contents of Module 4 1.2 Other modules of this workshop", " HKU Single-cell Workshop (Module 4) Yuanhua Lab: Mingze Gao, Rongting Huang, Xianjie Huang, Aaron Kwok, Zhuoxuan Li, Chen Qiao, Yuanhua Huang 2021-07-03 Chapter 1 Introduction This sub-tutorial book is for the Module 4 of Single-cell Workshop at HKU. You can fork or download this tutorial book (and re-run it) from this GitHub repo: https://github.com/Rongtingting/SingleCell-Workshop-2021 1.1 Contents of Module 4 Cell trajectory inference Overview of trajectory inference RNA velocity Diffusion pseudotime Cellular genetic analysis SNV analysis in single-cell omics mtDNA variants for lineage tracing Copy number variation analysis from scRNA-seq 1.2 Other modules of this workshop Module 1: Introduction to R (by Dr Joshua Ho &amp; lab) Please find the learning materials here: https://holab-hku.github.io/R-workshop/ Module 2: Fundamentals of scRNA-seq analysis (by Dr Joshua Ho) Materials will come soon… Module 3: Cell clustering, annotation and interaction (by Dr Asif Javed) Materials will come soon… Note: to build this book, use the following script in R: bookdown::render_book(&quot;index.Rmd&quot;, &quot;bookdown::gitbook&quot;) "],["env-pre.html", "Chapter 2 Prerequisites 2.1 Quick summary 2.2 (Optional) Install Windows Subsystem for Linux 2.3 Install Conda Environment 2.4 Other Preparation", " Chapter 2 Prerequisites 2.1 Quick summary For this module, a few tools in Python or command line are needed. If you are already familiar with Unix-based command-line interface, you can prepare your environment with this quick summary, otherwise please see detailed instructions below. For easier installation and cleaner environment, we recommend using conda (a popular environment management tool) with Python 3.9 here. After having conda installed, you can create an environment with our pre-defined config file sgcell.yml (click &amp; download it, and move it to the working directory). Then all you need is this command line: conda env create -f sgcell.yml Now, you can type conda env list. If the environment named sgcell is listed, it means you configured the environment successfully (now, enjoy this Module). 2.2 (Optional) Install Windows Subsystem for Linux Note, this is for Windows users only. While some required softwares only support Linux or macOS, you could install WSL to use Linux inside Windows. If you already have Linux or macOS, you can skip this section and jump directly to the section of conda installation for Linux or for macOS. The whole process of installing WSL requires at least 2G disk space. Note that this process was tested on Windows 10 (Version 2004, build 19041.1052). 2.2.1 What is the Windows Subsystem for Linux (WSL)? According to the Microsoft Docs, “The Windows Subsystem for Linux lets developers run a GNU/Linux environment – including most command-line tools, utilities, and applications – directly on Windows, unmodified, without the overhead of a traditional virtual machine or dualboot setup.” 2.2.2 Manual Installation Steps Step 1. Enable required feature in Windows PowerShell It is necessary to enable the required feature for WSL before installing it. Type powershell in the search box of the Windows taskbar. Right click Windows PowerShell and select Run as administrator. Type the command below in PowerShell. dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux Step 2. Download and install WSL Microsoft now supports several Linux distributions as WSL, such as Ubuntu, openSUSE, Fedora, etc (a full list here), among which we choose Ubuntu as an example. Ubuntu WSL could be freely downloaded and installed through Microsoft Store. Go to the webpage for Ubuntu in Microsoft Store. Click on the Get button. Wait for completion of downloading and installation. Click on the Launch button. Step 3. Create a new account for Ubuntu After successfully installing Ubuntu, a new user account should be created. Type user name and password following the prompts on the screen. Note, it is normal that the password is invisible when you are typing. Now Congratulations! You have successfully installed and set up Ubuntu in your Windows System! Next time you can re-open Ubuntu through the search box of the Windows taskbar. More information about the usage of WSL can be found at Microsoft Docs. 2.3 Install Conda Environment The whole process of installing conda environment requires at least 1G disk space. 2.3.1 What is conda? Conda is part of the Anaconda platform. According to the Anaconda docs, “Anaconda Individual Edition is a free, easy-to-install package manager, environment manager, and Python distribution with a collection of 1,500+ open source packages with free community support. Anaconda is platform-agnostic, so you can use it whether you are on Windows, macOS, or Linux.” For quick installation and configuration, we choose to install Miniconda instead of the whole Anaconda. “Miniconda is a free minimal installer for conda. It is a small, bootstrap version of Anaconda that includes only conda, Python, the packages they depend on, and a small number of other useful packages, including pip, zlib and a few others.” 2.3.2 Installation on Windows Although it is easy to install Miniconda itself on Windows, there are several conda softwares (e.g., bcftools, cellsnp-lite) required for this workshop that are well-supported only on Unix-Like systems. Linux or macOS is essential to use those softwares. Good news is that Microsoft has provided the Windows Subsystem for Linux (WSL), which enables you to use several Linux distributions on Windows 10. The installation of WSL is easy and details can be found here. After installing WSL, you could follow Section Installation on Linux to install Miniconda on WSL. 2.3.3 Installation on Linux This section is adapted based on Miniconda installation guides for Linux. In this section, we select the Miniconda with Python 3.9 as an example. Step 1. Open Shell Open Linux Shell / WSL Shell (see Section Install WSL for details of WSL). Step 2. Download Miniconda installer The Miniconda installer is a .sh file containing metadata of installation. Run wget &lt;installer_link&gt; to download the installer. e.g., Type in Shell wget https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh. You could choose other Miniconda installers based on your platform. A full list of installers can be found here. Step 3. Verify your installer hashes (Optional) An unmatched hash indicates there were some error during the downloading process. We could simply verify the installer hashes by typing sha256sum &lt;installer_file&gt; in the Shell. e.g., Type sha256sum Miniconda3-py39_4.9.2-Linux-x86_64.sh and check if the output hash is 536817d1b14cb1ada88900f5be51ce0a5e042bae178b5550e62f61e223deae7c. A full list of hashes can be found here. Step 4. Initialize Miniconda Run bash &lt;installer_file&gt; in Shell. e.g., Type bash Miniconda3-py39_4.9.2-Linux-x86_64.sh. Follow the prompts on the installer screens. When you are asked Do you wish the installer to initialize Miniconda3 by running conda init, we recommend “yes.” When the initialization is done, it looks like, Step 5. Close and re-open Shell Close and then re-open your Shell, to make the changes take effect. The screen should have a new (base) prefix, which looks like, It means the Shell is now in the base environment of conda. Step 6. Test your installation Type conda list in Shell. A list of installed packages appears if it has been installed correctly. 2.3.4 Installation on macOS You could refer to the Section Installation on Linux as the processes of installing Miniconda on macOS and Linux are quite similar. We briefly list the steps here for your quick reference. Step 1. Open macOS Terminal Step 2. Download Miniconda installer Type in Terminal wget https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-MacOSX-x86_64.sh. Step 3. Verify your installer hashes (Optional) Type shasum -a 256 Miniconda3-py39_4.9.2-MacOSX-x86_64.sh in Terminal and check if the output hash is b3bf77cbb81ee235ec6858146a2a84d20f8ecdeb614678030c39baacb5acbed1. Step 4. Initialize Miniconda Type in Terminal bash Miniconda3-py39_4.9.2-MacOSX-x86_64.sh. Follow the prompts on the installer screens. When you are asked Do you wish the installer to initialize Miniconda3 by running conda init, we recommend “yes.” Step 5. Close and re-open Terminal Step 6. Test your installation Type conda list in Terminal. A list of installed packages appears if it has been installed correctly. 2.4 Other Preparation 2.4.1 Conda Configuration To simplify the configuration of conda environment, we have pre-compiled a conda environment, named sgcell, containing some required softwares for this workshop. The corresponding metafile sgcell.yml of this environment was exported, based on which we can easily re-build the pre-compiled environment. The sgcell.yml can be downloaded from sgcellworkshop repo on sourceforge. Assuming you have installed conda and activated any environment in the Shell / Terminal (if not, please install conda based on Section Install Conda Environment first). Then, Open Linux Shell / macOS Terminal / WSL Shell Add conda channels, conda config --add channels bioconda conda config --add channels conda-forge Re-build the pre-compiled environment (Note that this can fail due to unstable connection to the server, please re-try for several times). conda env create -f sgcell.yml Activate the new environment sgcell, conda activate sgcell Verify if the new environment was installed correctly, conda env list The sgcell sould appear in the listed environments. "],["pseudo-time-and-trajectory-analysis.html", "Chapter 3 Pseudo-time and trajectory analysis", " Chapter 3 Pseudo-time and trajectory analysis Here is a review of existing methods. "],["trajectory-inference-using-rna-velocity.html", "Chapter 4 Trajectory Inference using RNA Velocity 4.1 Use scVelo package within R 4.2 Endocrine Pancreas 4.3 Data Preprocessing 4.4 Pseudotime based on Diffusion Map 4.5 Compute velocity and velocity graph 4.6 Diffusion-map Pseudotime with velocity 4.7 Plot Results 4.8 Interprete Velocity 4.9 Velocity in cycling progenitors 4.10 Dynamical Mode and related analysis 4.11 Session Info", " Chapter 4 Trajectory Inference using RNA Velocity 4.1 Use scVelo package within R First, we need to create a Conda environment and install scVelo afterwards, since scVelo is a Python package, conda create -n workshop python=3.7 conda activate workshop pip install -U scvelo==0.2.2 pip install numba==0.51 To use Python packages within R environment, we will need the help of R colorize(\"reticulate\", \"#316A9E\") library, # install.packages(&quot;reticulate&quot;) library(reticulate) Now we can load the appropriate Conda environments that with scVelo contained, conda_list() ## name python ## 1 Py2 /Users/yuanhua/anaconda3/envs/Py2/bin/python ## 2 r_env41 /Users/yuanhua/anaconda3/envs/r_env41/bin/python ## 3 sgcell /Users/yuanhua/anaconda3/envs/sgcell/bin/python use_condaenv(&quot;sgcell&quot;) plt &lt;- import(&quot;matplotlib.pyplot&quot;, as = &quot;plt&quot;) scv &lt;- import (&quot;scvelo&quot;) scv$logging$print_version() scv$settings$presenter_view = TRUE scv$settings$verbosity = 3 scv$settings$set_figure_params(&quot;scvelo&quot;) 4.2 Endocrine Pancreas We will download and use the built-in pancreas dataset to demonstrate the useage of RNA velocity analysis. Endocrine development in pancreas lineage has four major fates: \\(\\alpha\\), \\(\\beta\\), \\(\\delta\\), \\(\\epsilon\\). Dataset from Bastidas-Ponce et al. (2018) adata &lt;- scv$datasets$pancreas() adata ## AnnData object with n_obs × n_vars = 3696 × 27998 ## obs: &#39;clusters_coarse&#39;, &#39;clusters&#39;, &#39;S_score&#39;, &#39;G2M_score&#39; ## var: &#39;highly_variable_genes&#39; ## uns: &#39;clusters_coarse_colors&#39;, &#39;clusters_colors&#39;, &#39;day_colors&#39;, &#39;neighbors&#39;, &#39;pca&#39; ## obsm: &#39;X_pca&#39;, &#39;X_umap&#39; ## layers: &#39;spliced&#39;, &#39;unspliced&#39; ## obsp: &#39;distances&#39;, &#39;connectivities&#39; To run velocity analysis on your own data, read your file with colorize(\"adata = scv$read(file_path)\", \"#316A9E\"). If you want to save model and parameters after processing, run the following command, colorize(\"adata$write(file_path, compression = 'gzip')\", \"#316A9E\"). Proportions of unspliced/spliced mRNA reads, UMAP embedding and cluster annotations can be printed and visualized using built-in functions. scv$utils$show_proportions(adata) scv$pl$proportions(adata, figsize=c(10, 3), show=FALSE) ## [[1]] ## AxesSubplot(0.18,0.15;0.354545x0.76) ## ## [[2]] ## AxesSubplot(0.605455,0.15;0.354545x0.76) plt$savefig(&#39;images/RNA-velo-fig1.png&#39;) RNA-velo-fig2 scv$pl$scatter(adata, legend_loc = &quot;best&quot;, size = 50, title = &quot;Pancreas Celltype&quot;, show=FALSE) ## AxesSubplot(0.18,0.15;0.78x0.76) plt$savefig(&#39;images/RNA-velo-fig2.png&#39;) RNA-velo-fig2 4.3 Data Preprocessing Preprocessing contains: - gene selection by detection (detected with a minimum number of counts) - high variability (dispersion) - normalizing every cell by its initial size and logarithmizing X First and second order moments are also computed (mean, uncentered variance for deterministic, stochastic mode respectively) among nearest neighbors in PCA space. scv$pp$filter_and_normalize(adata, min_shared_counts = as.integer(20), n_top_genes = as.integer(2000)) scv$pp$moments(adata, n_pcs = as.integer(30), n_neighbors = as.integer(30)) 4.4 Pseudotime based on Diffusion Map Pseudotime, a part of standardized scRNA-seq analysis pipeline, is also implemented in this package, and can be compared with the colorize(\"latent time\", \"#316A9E\") introduced in dynamical mode. adata$uns$data$iroot &lt;- which.min(adata$obsm[&#39;X_umap&#39;][, 1]) scv$tl$diffmap(adata) scv$tl$dpt(adata) scv$pl$scatter(adata, color = &#39;dpt_pseudotime&#39;, title = &#39;pseudotime&#39;, color_map = &#39;gnuplot&#39;, colorbar = TRUE, rescale_color = c(0,1), perc=c(2, 98), show=FALSE) ## AxesSubplot(0.18,0.15;0.78x0.76) plt$savefig(&#39;images/RNA-velo-fig3.png&#39;) RNA-velo-fig3 4.5 Compute velocity and velocity graph scVelo has incorporated 3 modes for velocity estimation: - Deterministic - Stochastic - Dynamical For deterministic and stochastic mode, the gene-specific velocities are obtained by fitting linear regression ratio (constant transcriptional state) between unspliced/spliced mRNA abundances. Under linear assumptions, how the colorize(\"observed abundances deviate from the steady state\", \"#b22e5b\") regression line is velocity. scv$tl$velocity(adata, mode = &quot;stochastic&quot;) To calculate velocity graph, we need to run colorize(\"velocity_graph()\", \"#316A9E\"). Velocity graph is the cosine correlation of potential cell transitions with velocity vector in high dimensional space. It summarizes the possible cell transition states and has dimension of \\({n}_{obs} * {n}_{obs}\\). scv$tl$velocity_graph(adata, sqrt_transform = TRUE) 4.6 Diffusion-map Pseudotime with velocity Pseudotime, a part of standardized scRNA-seq analysis pipeline, is also implemented in this package, and can be compared with the colorize(\"latent time\", \"#316A9E\") introduced in dynamical mode. scv$tl$velocity_pseudotime(adata) scv$pl$scatter(adata, color = &#39;velocity_pseudotime&#39;, cmap = &#39;gnuplot&#39;, show=FALSE) ## AxesSubplot(0.18,0.15;0.78x0.76) plt$savefig(&#39;images/RNA-velo-fig4.png&#39;) RNA-velo-fig4 scv$pl$scatter(adata, x = &quot;velocity_pseudotime&quot;, y = c(&#39;Actn4&#39;, &#39;Ppp3ca&#39;, &#39;Cpe&#39;, &#39;Nnat&#39;), fontsize = 10, size = 10, legend_loc = &#39;best&#39;, color = &#39;clusters&#39;, figsize=c(12, 10), show=FALSE) ## [[1]] ## AxesSubplot(0.18,0.15;0.169565x0.76) ## ## [[2]] ## AxesSubplot(0.383478,0.15;0.169565x0.76) ## ## [[3]] ## AxesSubplot(0.586957,0.15;0.169565x0.76) ## ## [[4]] ## AxesSubplot(0.790435,0.15;0.169565x0.76) plt$savefig(&#39;images/RNA-velo-fig5.png&#39;) RNA-velo-fig5 4.7 Plot Results Velocities are projected onto the specified embedding colorize(\"basis\", \"#316A9E\") and can be visualized in one of the three ways: - On single cell level - On grid level - Streamlines, which is most commonly used scv$pl$velocity_embedding_stream(adata, basis = &quot;umap&quot;, color = &quot;clusters&quot;, legend_loc = &quot;best&quot;, dpi = 150, show=FALSE) ## AxesSubplot(0.18,0.15;0.78x0.76) plt$savefig(&#39;images/RNA-velo-fig6.png&#39;) RNA-velo-fig5 scv$pl$velocity_embedding(adata, basis = &quot;umap&quot;, arrow_length = 3, arrow_size = 2, dpi = 150, show=FALSE) ## AxesSubplot(0.18,0.15;0.78x0.76) plt$savefig(&#39;images/RNA-velo-fig7.png&#39;) RNA-velo-fig7 4.8 Interprete Velocity We could also examine the phase portraits of interested genes to understand how inferred directions are supported by particular genes. scv$pl$velocity(adata, c(&quot;Cpe&quot;, &quot;Gnao1&quot;, &quot;Ins2&quot;, &quot;Adk&quot;), ncols = 2, show=FALSE) ## AxesSubplot(0.868235,0.15;0.0917647x0.271429) plt$savefig(&#39;images/RNA-velo-fig8.png&#39;) RNA-velo-fig8 Positive velocity indicates that a gene is up-regulated, which occurs for cells that show higher abundance of unspliced mRNA for that gene than expected in steady state. Conversely, negative velocity indicates that a gene is down-regulated. 4.9 Velocity in cycling progenitors The cell cycle detected by RNA velocity, is biologically affirmed by cell cycle scores (standardized scores of mean expression levels of phase marker genes). scv$tl$score_genes_cell_cycle(adata) scv$pl$scatter(adata, color_gradients = c(&quot;S_score&quot;, &quot;G2M_score&quot;), smooth = TRUE, perc = c(5, 95), show=FALSE) ## AxesSubplot(0.18,0.15;0.78x0.76) plt$savefig(&#39;images/RNA-velo-fig9.png&#39;) RNA-velo-fig9 4.10 Dynamical Mode and related analysis Dynamical mode does not necessarily rely on linear assumptions, instead it consider gene-specific rates of transcription, splicing and degradation rates as well as transient cell-states. To use dynamical mode, we just need to call colorize(\"revocer_dynamics()\", \"#316A9E\") before computing velocity. scv$tl$recover_dynamics(adata) scv$tl$velocity(adata, mode = &quot;dynamical&quot;) scv$tl$velocity_graph(adata) Latent time of the underlying cellular processes can be recovered via dynamical mode. Based on cells’ transcriptional dynamics, latent time approximates the real time experienced by cells as they differentiate. Latent time could distinguish temporal position more compared with pseudotime. scv$tl$latent_time(adata) scv$pl$scatter(adata, color = &quot;latent_time&quot;, color_map = &quot;gnuplot&quot;, size = 80, basis = &quot;umap&quot;) scv$pl$scatter(adata, x = &quot;latent_time&quot;, y = c(&#39;Actn4&#39;, &#39;Ppp3ca&#39;, &#39;Cpe&#39;, &#39;Nnat&#39;), fontsize = 10, size = 10, legend_loc = &#39;best&#39;, color = &#39;clusters&#39;) We could also pull out the top genes driving the dynamic RNA velocities. topgenes &lt;- adata$var[&quot;fit_likelihood&quot;] topgenes_vals &lt;- topgenes[, 1] names(topgenes_vals) &lt;- rownames(topgenes) topgenes_vals &lt;- sort(topgenes_vals, decreasing = TRUE) head(topgenes_vals) scv$pl$scatter(adata, basis = names(topgenes_vals)[1:5], ncols = 5, frameon = FALSE) scv$pl$heatmap(adata, var_names = names(topgenes_vals), tkey = &#39;latent_time&#39;, n_convolve = as.integer(100), col_color = &#39;clusters&#39;) 4.11 Session Info sessionInfo() ## R version 4.1.0 (2021-05-18) ## Platform: x86_64-apple-darwin13.4.0 (64-bit) ## Running under: macOS Big Sur 11.4 ## ## Matrix products: default ## LAPACK: /Users/yuanhua/anaconda3/envs/r_env41/lib/libopenblasp-r0.3.15.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods ## [7] base ## ## other attached packages: ## [1] reticulate_1.20 ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.6 rstudioapi_0.13 knitr_1.33 ## [4] magrittr_2.0.1 lattice_0.20-44 R6_2.5.0 ## [7] rlang_0.4.11 stringr_1.4.0 highr_0.9 ## [10] tools_4.1.0 grid_4.1.0 xfun_0.23 ## [13] png_0.1-7 jquerylib_0.1.4 htmltools_0.5.1.1 ## [16] yaml_2.2.1 digest_0.6.27 bookdown_0.22 ## [19] Matrix_1.3-4 sass_0.4.0 evaluate_0.14 ## [22] rmarkdown_2.8 stringi_1.6.2 compiler_4.1.0 ## [25] bslib_0.2.5.1 jsonlite_1.7.2 "],["copy-number-variation-estimation-from-scrna-seq.html", "Chapter 5 Copy number variation estimation from scRNA-seq 5.1 Method: inferCNV 5.2 Application on TNBC1 5.3 ref", " Chapter 5 Copy number variation estimation from scRNA-seq Rongting Huang 2021-06-29 5.1 Method: inferCNV InferCNV: Inferring copy number alterations from tumor single cell RNA-Seq data 5.1.1 install inferCNV Software Requirements JAGS R (&gt;3.6) In order to run infercnv, JAGS (Just Another Gibbs Sampler) must be installed. Download JAGS from https://sourceforge.net/projects/mcmc-jags/files/JAGS/4.x/ and install JAGS in your environment (windows/MAC). If you use inferCNV on server, install JAGS via conda install in your conda environment is recommended. conda install -c conda-forge jags More details refer to inferCNV wiki page Five options for installing inferCNV Option A: Install infercnv from BioConductor (preferred) if (!requireNamespace(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;infercnv&quot;) For more other options, refer to Five options for installing inferCNV Data requirements a raw counts matrix of single-cell RNA-Seq expression an annotations file which indicates which cells are tumor vs. normal. a gene/chromosome positions file File-Definitions 5.1.2 getting started If you have installed infercnv from BioConductor, you can run the example data with: library(infercnv) infercnv_obj = CreateInfercnvObject(raw_counts_matrix=system.file(&quot;extdata&quot;, &quot;oligodendroglioma_expression_downsampled.counts.matrix.gz&quot;, package = &quot;infercnv&quot;), annotations_file=system.file(&quot;extdata&quot;, &quot;oligodendroglioma_annotations_downsampled.txt&quot;, package = &quot;infercnv&quot;), delim=&quot;\\t&quot;, gene_order_file=system.file(&quot;extdata&quot;, &quot;gencode_downsampled.EXAMPLE_ONLY_DONT_REUSE.txt&quot;, package = &quot;infercnv&quot;), ref_group_names=c(&quot;Microglia/Macrophage&quot;,&quot;Oligodendrocytes (non-malignant)&quot;)) infercnv_obj = infercnv::run(infercnv_obj, cutoff=1, # cutoff=1 works well for Smart-seq2, and cutoff=0.1 works well for 10x Genomics out_dir=tempfile(), cluster_by_groups=TRUE, denoise=TRUE, HMM=TRUE) If you can run the getting started part with demo data provided by inferCNV, then it is installed successfully. Demo Example Figure Demo Example Figure 5.2 Application on TNBC1 5.2.1 data description TNBC1 is a triple negative breast cancer tumor sample of high tumor purity (72.6%) with 796 single tumor cells and 301 normal cells. The dataset is available on NCBI GEO under the accession number GSM4476486. Details of TNBC1 dataset (from published articles, copyKAT). TNBC1 Number of clones Number of tumor clones Tumor clone-specific copy gain Triple negative breast cancer 3 2 C1: 4p, 7q, 9, 17q C2: 3p, 6q, 7p, 11q, X Expression Subclusters of TNBC1 dataset (from gene expression analysis-Seurat). Clone A Clone B Normal 488 307 302 Notes: 488,307, 247, 55 umap B Allele Frenquency (BAF) baf1 baf2 baf3 BAF V.S. Expression confusion heatmap 5.2.2 run inferCNV data_download demo1_log_file demo2_log_file output_files # library(infercnv) # library(utils) # library (BiocGenerics) ## DEMO1 # # tnbc &lt;- read.delim(&quot;C://Users/Rongting/Documents/GitHub_repos/combinedTNBC1.txt&quot;) # anno &lt;- tnbc[2,] # anno &lt;- t(anno) # anno &lt;- as.data.frame(anno) # # gex &lt;- tnbc[-c(1:2),] # gex &lt;- type.convert(gex) # # gene_file &lt;- &quot;C://Users/Rongting/Documents/GitHub_repos/gene_note_noheader_unique.txt&quot; # # infercnv_obj = CreateInfercnvObject(raw_counts_matrix=gex, # annotations_file=anno, # delim=&#39;\\t&#39;, # gene_order_file=gene_file, # ref_group_names= &quot;N&quot;) # output = &quot;C://Users/Rongting/Documents/GitHub_repos/tnbc1_demo&quot; # infercnv_obj = infercnv::run(infercnv_obj, # cutoff=0.1, # out_dir= output , # cluster_by_groups=T, # denoise=T, # HMM=T) ## DEMO2 # gene_file &lt;- &quot;C://Users/Rongting/Documents/GitHub_repos/gene_note_noheader_unique.txt&quot; # # anno_file &lt;- &#39;C://Users/Rongting/Documents/GitHub_repos/tnbc-3cluster-id.txt&#39; # # infercnv_obj2 = CreateInfercnvObject(raw_counts_matrix=gex, # annotations_file=anno_file, # delim=&#39;\\t&#39;, # gene_order_file=gene_file, # ref_group_names= &quot;Normal&quot;) # # output = &quot;C://Users/Rongting/Documents/GitHub_repos/tnbc1_demo2&quot; # # infercnv_obj2 = infercnv::run(infercnv_obj2, # cutoff=0.1, # out_dir= output, # cluster_by_groups=T, # denoise=T, # HMM=T) ################# ##Notes ################# ## load the package library(Seurat) library(infercnv) ## prepare the data (cellranger output) ### load count matrix (example) matrix_path &lt;- &quot;../cellranger/xxxx/count_xxxxx/outs/filtered_gene_bc_matrices/GRCh38/&quot; ### read count matrix gex_mtx &lt;- Seurat::Read10X(data.dir = matrix_path) ### run inferCNV with loop celltype = c(&#39;CloneA&#39;, &#39;CloneB&#39;, &#39;Normal&#39;) for (i in celltype){ infercnv_obj1 = CreateInfercnvObject(raw_counts_matrix=gex_mtx, annotations_file=anno_file, delim=&#39;\\t&#39;, gene_order_file=gene_file, ref_group_names=c(i)) output &lt;- paste0(&#39;/groups/cgsd/rthuang/processed_data/inferCNV/xxxx/&#39;,&#39;xxxx_&#39;, i) infercnv_obj1 = infercnv::run(infercnv_obj1, cutoff=0.1, out_dir= output , cluster_by_groups=T, denoise=T, HMM=T) } 5.2.3 inferCNV result demo1 infercnv1 infercnv2 demo2 infercnv3 infercnv4 5.3 ref https://www.r-bloggers.com/2012/04/getting-started-with-jags-rjags-and-bayesian-modelling/ bookdown::render_book(&quot;index.Rmd&quot;, &quot;bookdown::gitbook&quot;) "],["mtdna-variants-for-lineage-inference-from-single-cell-omics.html", "Chapter 6 mtDNA variants for lineage inference from single-cell omics 6.1 Pileup with cellsnp-lite 6.2 Clonal analysis with MQuad", " Chapter 6 mtDNA variants for lineage inference from single-cell omics 6.1 Pileup with cellsnp-lite Cellsnp-lite is designed to perform efficient pileup and genotyping for both bulk and single cell sequencing data. It could be easily installed via conda with conda install -c bioconda -c conda-forge cellsnp-lite. We use a SMART-seq2 dataset as an example, which were packed into joxm.bam.all.77.tar.gz (77 bam files, ~3.5G in total; McCarthy et al, 2020). First, please download joxm.bam.all.77.tar.gz, joxm.hg19.bam.lst and joxm.sample.lst from sgcellworkshop repo on sourceforge. Put the three files in the same directory. Then unpack the bam files with command tar zxvf joxm.bam.all.77.tar.gz. The bam files, together with the .bai files, should be in the sort/ directory. 6.1.1 Pileup without given SNPs In this example, we use cellsnp-lite to pileup chrM on the bam files without a given SNP list (in denovo mode), whose output could be used as inputs of MQuad model for mitochondrial clone analysis. Note that the pileup results joxm.hg19.cellsnp.mode2b.tar.gz can be downloaded from sgcellworkshop repo on sourceforge and then unpacked with command tar zxvf joxm.hg19.cellsnp.mode2b.tar.gz. The command line to generate the results is, cellsnp-lite \\ -S ./joxm.hg19.bam.lst \\ -i ./joxm.sample.lst \\ -O ./cellsnp2b \\ --chrom MT \\ --cellTAG None \\ --UMItag None \\ --minCOUNT 20 \\ --minMAF 0 \\ --genotype \\ --gzip 6.1.2 Pileup with given SNPs This time, we use cellsnp-lite to pileup given SNPs on the bam files. The 112 SNPs, stored in joxm.hg19.somatic.sites.vcf, were somatic SNPs called in (McCarthy et al, 2020) and can be downloaded from sgcellworkshop repo. Note that the pileup results joxm.hg19.somatic.cellsnp.mode1b.tar.gz can be downloaded from sgcellworkshop repo on sourceforge and then unpacked with command tar zxvf joxm.hg19.somatic.cellsnp.mode1b.tar.gz. The command line to generate the results is, cellsnp-lite \\ -S ./joxm.hg19.bam.lst \\ -i ./joxm.sample.lst \\ -O ./cellsnp1b \\ -R ./joxm.hg19.somatic.sites.vcf \\ --cellTAG None \\ --UMItag None \\ --minCOUNT 0 \\ --minMAF 0 \\ -p 4 \\ --genotype \\ --gzip 6.2 Clonal analysis with MQuad We have finished a nice book. "],["preprocessing-of-dataset.html", "Chapter 7 Preprocessing of dataset 7.1 List of packages aligned in pipeline: 7.2 Installation of packages/softwares 7.3 Preprocessing pipline", " Chapter 7 Preprocessing of dataset Author: “Chen Qiao” Date: “7/2/2021” In this tutorial, we would take the Pancreas dataset used in scVelo paper for example, show how to retrieve the fastq dataset from NCBI, process using cellranger, velocyto or dropest to obtain the spliced and unspliced count matrices for RNA velocity estimation. 7.1 List of packages aligned in pipeline: SRATool: for downlowding datasets from NCBI, Pancreas dataset E15_5 with SRA id SRR9201794 Cellranger: for counting, analyzing, QA on fastqs, outputs input for velocyto/dropest Alternative tools for counting spliced and unspliced reads from Cellranger outputs/ Velocyto samtools: Velocyto’s dependency pakcage dropest 7.2 Installation of packages/softwares All the codes are executed on Linux commandline, lines starting with “#” are comments. My working path root is “/data/users/cqiao/share/,” you may change to any foler as you like. 7.2.1 SRATool Refer to This tutorial for step 3. software configuration # 1. download software wget http://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/current/sratoolkit.current-ubuntu64.tar.gz # 2. extract package tar -xzf sratoolkit.tar.gz # 3. configuration software ./sratoolkit.2.11.0-ubuntu64/vdb-config --interactive # 4. add software to system path so that we can easily call it export PATH=$PATH:/data/users/cqiao/share/sratoolkit.2.11.0-ubuntu64/bin/ # 5. test installation, expected to output some sequencing results fastq-dump --stdout -X 2 SRR390728 7.2.2 Cellranger # 1. download software wget -O cellranger-6.0.2.tar.gz &quot;https://cf.10xgenomics.com/releases/cell-exp/cellranger-6.0.2.tar.gz?Expires=1625079682&amp;Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cHM6Ly9jZi4xMHhnZW5vbWljcy5jb20vcmVsZWFzZXMvY2VsbC1leHAvY2VsbHJhbmdlci02LjAuMi50YXIuZ3oiLCJDb25kaXRpb24iOnsiRGF0ZUxlc3NUaGFuIjp7IkFXUzpFcG9jaFRpbWUiOjE2MjUwNzk2ODJ9fX1dfQ__&amp;Signature=Ez05ie1~xJTrUhsc3Q1nZ3JemF5Jc2k3zOOC2PlJiI80TI8YOxM3vVXli90ib1Kl4WgQFRl5~Wp-ce5m2gVAyywGf9juiMk3kW2WGz7xy3DN9nCG-he0rNLvbknDXgkqkj8HeirWyt-EvGgsaqBRZZx7GppGl~MGQOseLTF7DMpJaIm-qwU-72mkVzDy0vKrYVZ~Uiqnlr0M2Hhx14lPwm6QocBuSaKLkmcuZosN4TIS05Z~GPHYt9hQWkykvY4oyd5Y~tyTaMOM8ozVVdI7KgCfc2PmQvhr1bMuhUaEPa3skigzAFjIezbw-fXW3Z8jplwj4lAQ0LybI03ozZr6jg__&amp;Key-Pair-Id=APKAI7S6A5RYOXBWRPDA&quot; # 2. extract files tar -xzf cellranger-6.0.2.tar.gz # 3. add software to system path so that we can easily call it export PATH=$PATH:/data/users/cqiao/share/cellranger-6.0.2 # 4. download gene refereces (optional saving path: ./cellranger/gtfs/) cd cellranger-6.0.2 mkdir gtfs cd gtfs # human (optional for your needs) wget https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-GRCh38-2020-A.tar.gz tar -xzf refdata-gex-GRCh38-2020-A.tar.gz # mouse (we shall use this for Pancreas dataset) wget https://cf.10xgenomics.com/supp/cell-exp/refdata-gex-mm10-2020-A.tar.gz tar -xzf refdata-gex-mm10-2020-A.tar.gz 7.2.3 Velocyto &amp; Samtools 7.2.3.1 Samtools # 1. download &amp; extract software wget https://github.com/samtools/samtools/releases/download/1.12/samtools-1.12.tar.bz2 tar -jxvf samtools-1.12.tar.bz2 cd samtools-1.12 # 2. configure build, specify --prefix to locate the root dir ./configure --prefix=/data/users/cqiao/share/samtools # 3. compile and install software make make install # 4. add software to system path so that we can easily call it PATH=$PATH:/data/users/cqiao/share/samtools/bin/ # go back to parant folder cd .. 7.2.3.2 Velocyto Assume your python packages are managed by conda and pip # install dependent packages, may also use pip conda install numpy scipy cython numba matplotlib scikit-learn h5py click # install velocyto pip install velocyto 7.2.4 Dropest Install dependent libraries Install RPackages (in R) install.packages(c(&quot;Rcpp&quot;,&quot;RcppEigen&quot;, &quot;RInside&quot;, &quot;Matrix&quot;)) Setup a local lib path: export LOCAL_LIBS=/data/users/cqiao/share/local mkdir $LOCAL_LIBS export PATH=$LOCAL_LIBS/bin:$LOCAL_LIBS/usr/local/bin/:$PATH Install CMake wget https://cmake.org/files/v3.12/cmake-3.12.0-rc1.tar.gz tar xvf cmake-3.12.0-rc1.tar.gz cd cmake-3.12.0-rc1 ./bootstrap --prefix=$LOCAL_LIBS make make install cd .. Zlib wget https://zlib.net/zlib-1.2.11.tar.gz tar xvf zlib-1.2.11.tar.gz cd zlib-1.2.11 ./configure --prefix=$LOCAL_LIBS make make install cd .. BamTools git clone https://github.com/pezmaster31/bamtools.git cd bamtools mkdir build &amp;&amp; cd build cmake ../ make make install DESTDIR=$LOCAL_LIBS cd .. Bzip2 wget https://www.sourceware.org/pub/bzip2/bzip2-latest.tar.gz tar -xzvf bzip2-latest.tar.gz cd bzip2-1.0.8 make -f Makefile-libbz2_so make install PREFIX=$LOCAL_LIBS cp -a libbz2.so* $LOCAL_LIBS/lib/ ln -s $LOCAL_LIBS/lib/libbz2.so.1.0 $LOCAL_LIBS/lib/libbz2.so cd .. Boost wget http://sourceforge.net/projects/boost/files/boost/1.60.0/boost_1_60_0.tar.gz tar xzf boost_1_60_0.tar.gz cd boost_1_60_0 ./bootstrap.sh ./b2 cxxflags=&quot;-std=c++11&quot; include=&quot;$LOCAL_LIBS/include/&quot; search=&quot;$LOCAL_LIBS/lib/&quot; link=shared threading=multi install --prefix=$LOCAL_LIBS cd .. DropEst git clone https://github.com/hms-dbmi/dropEst.git mkdir dropEst/build cd dropEst/build cmake -D CMAKE_INSTALL_PREFIX=&quot;/data/users/cqiao/share/dropesttool&quot; .. &amp;&amp; make export PATH=$PATH:/data/users/cqiao/share/dropesttool/bin/ 7.3 Preprocessing pipline 7.3.1 1. Download and split Pancreas E15_5 fastq data from NCBI: fasterq-dump --split-files SRR9201794 Result would be: SRR9201794_1.fastq SRR9201794_2.fastq Rename files for cellranger: mv SRR9201794_1.fastq SRR9201794_S1_L001_R1_001.fastq mv SRR9201794_2.fastq SRR9201794_S1_L001_R2_001.fastq Optinally, move them to a folder /data/users/cqiao/share/E15_5 7.3.2 2. Run Cellranger count, referring to the mouse refdata cellranger count --id=pancreas_E15_5 \\ --fastqs=/data/users/cqiao/share/E15_5 \\ --transcriptome=/data/users/cqiao/share/cellranger-6.0.2/gtfs/refdata-gex-mm10-2020-A --id specifies the output dir, the output root. 7.3.3 3. Run Velocyto/Dropest. prepare some variables to store path names, so that afterwards we do not need to use the long names. # Barchodes if cellranger output files: gzip -d ./pancreas_E15_5/outs/filtered_feature_bc_matrix/barcodes.tsv.gz BARCODES=./pancreas_E15_5/outs/filtered_feature_bc_matrix/barcodes.tsv # Bam file BAMFILE=./pancreas_E15_5/outs/possorted_genome_bam.bam # transcriptome reference GTF=/data/users/cqiao/share/cellranger-6.0.2/gtfs/refdata-gex-mm10-2020-A/genes/genes.gtf Velocyto velocyto run -b $BARCODES -o ./velocyto_res $BAMFILE $GTF Results are stored in ./velocyto_res/XXX.loom Dropest Requires a .xml configuration file specifying the platform settings for sequencing data. Template configure file could be downloaded here. We shall use 10x.xml for Pancreas E15_5 dataset. Replace line 64 with the path of 10x.xml: ... &lt;barcodes_file&gt;./pancreas_E15_5/outs/filtered_feature_bc_matrix/barcodes.tsv&lt;/barcodes_file&gt; ... Then execute the following code: $bin/dropest -f -V -g $GTF -c $config_file $BAMFILE Results are stored in file ./pancreas_E15_5/dropEst/cell.counts.matrices.rds. "],["references.html", "References", " References "]]
